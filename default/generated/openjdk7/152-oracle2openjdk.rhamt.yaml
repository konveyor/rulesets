- category: potential
  customVariables: []
  description: |-
    JavaFX usage
    Currently OpenJFX (open-source implementation of JavaFX) is neither shipped nor supported on RHEL.
  effort: 0
  labels:
  - konveyor.io/source=oraclejdk
  - konveyor.io/target=openjdk
  links:
  - title: Knowledge base article about JavaFX support in RHEL
    url: https://access.redhat.com/solutions/3299701
  - title: RFE to include OpenJFX in RHEL
    url: https://bugzilla.redhat.com/show_bug.cgi?id=1275610
  message: Currently OpenJFX (open-source implementation of JavaFX) is neither shipped
    nor supported on RHEL.
  ruleID: oracle2openjdk-00000
  when:
    java.referenced:
      location: IMPORT
      pattern: javafx*
- category: potential
  customVariables: []
  description: |-
    Fonts usage
    The font library is different in OpenJDK compared to OracleJDK.. This means slightly different text layout in some cases.. Ensure with tests that the output is still as expected.
  effort: 0
  labels:
  - konveyor.io/source=oraclejdk
  - konveyor.io/target=openjdk
  links:
  - title: Knowledge base article OracleJDK vs. OpenJDK
    url: https://access.redhat.com/solutions/2489791
  message: The font library is different in OpenJDK compared to OracleJDK.. This means
    slightly different text layout in some cases.. Ensure with tests that the output
    is still as expected.
  ruleID: oracle2openjdk-00001
  when:
    or:
    - java.referenced:
        location: IMPORT
        pattern: (java.awt|javafx.scene.text).Font
    - java.referenced:
        location: METHOD_CALL
        pattern: (java.awt|javafx.scene.text)*Font*
    - java.referenced:
        location: METHOD_CALL
        pattern: javax.swing*Font*
- category: potential
  customVariables: []
  description: |-
    Resource management API usage
    OpenJDK does not support the resource management API for Java.
  effort: 0
  labels:
  - konveyor.io/source=oraclejdk
  - konveyor.io/target=openjdk
  links:
  - title: Knowledge base article OracleJDK vs. OpenJDK
    url: https://access.redhat.com/solutions/2489791
  message: OpenJDK does not support the resource management API for Java.
  ruleID: oracle2openjdk-00002
  when:
    java.referenced:
      location: PACKAGE
      pattern: jdk.management.resource*
- category: potential
  customVariables: []
  description: |-
    Color management usage
    OracleJDK used to use KCMS as color mangement system up until JDK7 by default. It switched to Little CMS (LCMS) with JDK8.. OpenJDK uses LCMS. If you continued to use KCMS by using the property ``sun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider``, remove this property and ensure in your tests that your application still works as expected.
  effort: 0
  labels:
  - konveyor.io/source=oraclejdk
  - konveyor.io/target=openjdk
  links:
  - title: Knowledge base article OracleJDK vs. OpenJDK
    url: https://access.redhat.com/solutions/2489791
  message: OracleJDK used to use KCMS as color mangement system up until JDK7 by default.
    It switched to Little CMS (LCMS) with JDK8.. OpenJDK uses LCMS. If you continued
    to use KCMS by using the property ``sun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider``,
    remove this property and ensure in your tests that your application still works
    as expected.
  ruleID: oracle2openjdk-00003
  when:
    java.referenced:
      pattern: java.awt.Color
- category: potential
  customVariables:
  - name: package
    nameOfCaptureGroup: package
    pattern: java.awt.(?P<package>(geom|color|font|image|image\.renderable|print))?.*
  description: |-
    Java 2D library usage
    OpenJDK has its own 2D library, different from the proprietary JDK. This means that its performance may be different.. Ensure during your tests that the application behaves as expected.
  effort: 0
  labels:
  - konveyor.io/source=oraclejdk
  - konveyor.io/target=openjdk
  links:
  - title: Knowledge base article OracleJDK vs. OpenJDK
    url: https://access.redhat.com/solutions/2489791
  message: OpenJDK has its own 2D library, different from the proprietary JDK. This
    means that its performance may be different.. Ensure during your tests that the
    application behaves as expected.
  ruleID: oracle2openjdk-00004
  when:
    java.referenced:
      location: IMPORT
      pattern: java.awt.(geom|color|font|image|image.renderable|print)*
- category: potential
  customVariables: []
  description: |-
    Crypto: elliptic curves usage
    When on RHEL, OpenJDK uses the NSS crypto library from RHEL instead of the built-in one.. This mostly affects elliptic curve cryptography, where OpenJDK supports all of the RHEL curves and none of the others.. A list of all cipher suits of NSS in RHEL:. * RHEL6: [https://access.redhat.com/articles/1470663](https://access.redhat.com/articles/1470663). * RHEL7: [https://access.redhat.com/articles/1463663](https://access.redhat.com/articles/1463663)
  effort: 0
  labels:
  - konveyor.io/source=oraclejdk
  - konveyor.io/target=openjdk
  links:
  - title: Knowledge base article OracleJDK vs. OpenJDK
    url: https://access.redhat.com/solutions/2489791
  message: 'When on RHEL, OpenJDK uses the NSS crypto library from RHEL instead of
    the built-in one.. This mostly affects elliptic curve cryptography, where OpenJDK
    supports all of the RHEL curves and none of the others.. A list of all cipher
    suits of NSS in RHEL:. * RHEL6: [https://access.redhat.com/articles/1470663](https://access.redhat.com/articles/1470663).
    * RHEL7: [https://access.redhat.com/articles/1463663](https://access.redhat.com/articles/1463663)'
  ruleID: oracle2openjdk-00005
  when:
    or:
    - java.referenced:
        location: METHOD_CALL
        pattern: java.security.KeyPairGenerator.getInstance*
    - java.referenced:
        location: METHOD_CALL
        pattern: javax.crypto.KeyAgreement.getInstance*
    - java.referenced:
        location: CONSTRUCTOR_CALL
        pattern: java.security.spec.EC*
    - java.referenced:
        location: IMPORT
        pattern: java.security.spec.EC*
    - java.referenced:
        location: INHERITANCE
        pattern: java.security.spec.EC*
    - java.referenced:
        location: METHOD_CALL
        pattern: java.security.spec.EC*
    - java.referenced:
        location: VARIABLE_DECLARATION
        pattern: java.security.spec.EC*
    - java.referenced:
        location: CONSTRUCTOR_CALL
        pattern: java.security.spec.EllipticCurve*
    - java.referenced:
        location: IMPORT
        pattern: java.security.spec.EllipticCurve*
    - java.referenced:
        location: INHERITANCE
        pattern: java.security.spec.EllipticCurve*
    - java.referenced:
        location: METHOD_CALL
        pattern: java.security.spec.EllipticCurve*
    - java.referenced:
        location: VARIABLE_DECLARATION
        pattern: java.security.spec.EllipticCurve*

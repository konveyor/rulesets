- category: mandatory
  customVariables: []
  description: Methods in `java.lang.Thread` have been removed
  effort: 3
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: Java Thread Primitive Deprecation
    url: https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html
  message: |-
    The `java.lang.Thread.stop(Throwable)` method has been removed, as it is dangerous for a thread to not only be able to directly stop another thread, but with an exception it may not expect. Instead, the thread should be notified to stop using a shared variable or `interrupt()`.
     The `java.lang.Thread.destroy()` method was never even implemented and just throws `NoSuchMethodError`.
  ruleID: java-removals-00000
  when:
    or:
    - java.referenced:
        location: METHOD_CALL
        pattern: java.lang.Thread.stop(Throwable)
    - java.referenced:
        location: METHOD_CALL
        pattern: java.lang.Thread.destroy(*)
- category: mandatory
  customVariables: []
  description: sun.reflect.Reflection class was deprecated in Java 9
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: Example changeset
    url: https://github.com/openjdk/jfx/commit/d647521fa83f0cebe9532642ee97ffc4356c8bb3
  - title: JDK-8154203
    url: https://bugs.openjdk.org/browse/JDK-8154203
  message: "Java 9 introduced the `StackWalker API` to replace `sun.reflect.Reflection`.
    \n As such, the use of `sun.reflect.Reflection` class and particular the `getCallerClass`
    method should no longer be needed. \n Refer to the example changeset linked below."
  ruleID: java-removals-00010
  when:
    or:
    - java.referenced:
        location: IMPORT
        pattern: sun.reflect.Reflection*
    - java.referenced:
        location: METHOD_CALL
        pattern: sun.reflect.Reflection(*)
- category: mandatory
  customVariables: []
  description: sun.reflect.CallerSensitive annotation was deprecated in Java 9
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: Example changeset
    url: https://github.com/openjdk/jfx/commit/d647521fa83f0cebe9532642ee97ffc4356c8bb3
  - title: JDK-8154203
    url: https://bugs.openjdk.org/browse/JDK-8154203
  message: |-
    `sun.reflect.CallerSensitive` annotation was deprecated in Java 9.
     Refer to the example changeset linked below.
  ruleID: java-removals-00020
  when:
    or:
    - java.referenced:
        location: IMPORT
        pattern: sun.reflect.CallerSensitive*
    - java.referenced:
        location: ANNOTATION
        pattern: sun.reflect.CallerSensitive*
- category: mandatory
  customVariables: []
  description: The `javax.security.auth.Policy` class has been removed
  effort: 3
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: Java 10 javax.security.auth.Policy api
    url: https://docs.oracle.com/javase/10/docs/api/javax/security/auth/Policy.html
  - title: Java 11 java.security.Policy api
    url: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/Policy.html
  message: |-
    The `javax.security.auth.Policy` class has been removed.
     It should be replaced by the use of `java.security.Policy` and `java.security.ProtectionDomain`.
     Usage of `policy.getPermissions(subject,codeSource)` should be replaced with a call to
     policy.getPermissions passing in a new ProtectionDomain (see links below for details)
  ruleID: java-removals-00030
  when:
    java.referenced:
      pattern: javax.security.auth.Policy
- category: mandatory
  customVariables:
  - name: methodName
    nameOfCaptureGroup: methodName
    pattern: java.lang.SecurityManager.(?P<methodName>(checkAwtEventQueueAccess|checkSystemClipboardAccess|checkTopLevelWindow))?(.*)
  description: Certain methods under `java.lang.SecurityManager` tied to the AWT stack have been removed in Java 11
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: Java 11 SecurityManager api
    url: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/SecurityManager.html
  - title: Java 11 AWTPermission api
    url: https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/AWTPermission.html
  message: |-
    Due to modularisation, the methods `java.lang.SecurityManager.checkAwtEventQueueAccess()`,
     `java.lang.SecurityManager.checkSystemClipboardAccess()` and
     `java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object)`
     have been removed, so that the core SecurityManager class does not depend on the AWT stack.

     Replace with a call to `java.lang.SecurityManager.checkPermission(java.security.Permission)` as follows:

     `java.lang.SecurityManager.checkAwtEventQueueAccess()` --> `java.lang.SecurityManager.checkPermission(new AWTPermission("accessEventQueue"))`
     `java.lang.SecurityManager.checkSystemClipboardAccess()` --> `java.lang.SecurityManager.checkPermission(new AWTPermission("accessClipboard"))`
     `java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object) --> java.lang.SecurityManager.checkPermission(new AWTPermission("showWindowWithoutWarningBanner"))`
  ruleID: java-removals-00040
  when:
    java.referenced:
      location: METHOD_CALL
      pattern: java.lang.SecurityManager.(checkAwtEventQueueAccess|checkSystemClipboardAccess|checkTopLevelWindow)*
- category: mandatory
  customVariables: []
  description: SecurityManager method java.lang.SecurityManager.checkMemberAccess
    has been removed
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: Java 11 SecurityManager api
    url: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/SecurityManager.html
  message: |-
    The implementation of `java.lang.SecurityManager.checkMemberAccess(java.lang.Class, int)` relies on an assumption
     that the caller is at a stack depth of 4, which is not something that can be enforced, making the code error-prone.

     Replace with a call to `java.lang.SecurityManager.checkPermission(new RuntimePermission("accessDeclaredMembers"))`.
  ruleID: java-removals-00041
  when:
    java.referenced:
      location: METHOD_CALL
      pattern: java.lang.SecurityManager.checkMemberAccess(*)
- category: mandatory
  customVariables: []
  description: The java.util.logging.LogManager.addPropertyChangeListener() method
    was removed in Java 9
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: APIs removed in JDK 9
    url: https://docs.oracle.com/en/java/javase/16/migrate/removed-apis.html#GUID-B96BD00F-12A4-493A-9907-2FFE8DA6748C
  message: |-
    `java.util.logging.LogManager.addPropertyChangeListener()` method was removed in Java 9.
     In order to listen to property change events, please consider overriding the `java.util.logging.LogManager.readConfiguration` methods,
     which previously triggered property change events for the registered listeners.
  ruleID: java-removals-00050
  when:
    java.referenced:
      location: METHOD_CALL
      pattern: java.util.logging.LogManager.addPropertyChangeListener(*)
- category: mandatory
  customVariables: []
  description: The java.util.logging.LogManager.removePropertyChangeListener() method
    was removed in Java 9
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: APIs removed in JDK 9
    url: https://docs.oracle.com/en/java/javase/16/migrate/removed-apis.html#GUID-B96BD00F-12A4-493A-9907-2FFE8DA6748C
  message: |-
    `java.util.logging.LogManager.removePropertyChangeListener()` method was removed in Java 9.
     In order to listen to property change events, please consider overriding the `java.util.logging.LogManager.readConfiguration` methods,
     which previously triggered property change events for the registered listeners.
  ruleID: java-removals-00060
  when:
    java.referenced:
      location: METHOD_CALL
      pattern: java.util.logging.LogManager.removePropertyChangeListener(*)
- category: mandatory
  customVariables: []
  description: Property listener methods on `Pack200.Packer` and `Pack200.Unpacker`
    have been removed
  effort: 3
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: java.util.jar.Packer API
    url: https://docs.oracle.com/javase/8/docs/api/java/util/jar/Pack200.Packer.html
  - title: java.util.jar.Unpacker API
    url: https://docs.oracle.com/javase/8/docs/api/java/util/jar/Pack200.Unpacker.html
  message: |-
    Property listener methods on `Pack200.Packer` and `Pack200.Unpacker` have been removed.
     Instead, a strategy based on polling the `PROGRESS` value maintained by `java.util.jar.Pack200.Packer`
     or `java.util.jar.Pack200.Unpacker` is recommended.
  ruleID: java-removals-00100
  when:
    or:
    - java.referenced:
        location: METHOD_CALL
        pattern: java.util.jar.Pack200.Packer.addPropertyChangeListener(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: java.util.jar.Pack200.Packer.removePropertyChangeListener(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: java.util.jar.Pack200.Unpacker.addPropertyChangeListener(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: java.util.jar.Pack200.Unpacker.removePropertyChangeListener(*)
- category: mandatory
  customVariables:
  - name: methodName
    nameOfCaptureGroup: methodName
    pattern: sun.misc.Unsafe.(?P<methodName>(getInt|putInt|getFloat|putFloat|getDouble|putDouble|getBoolean|putBoolean|getObject|putObject|getByte|putByte|getChar|putChar|getShort|putShort|getLong|putLong|fieldOffset|staticFieldBase|tryMonitorEnter|monitorEnter|monitorExit))?(.*)
  description: Methods in `sun.misc.Unsafe` have been removed
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: JDK-8054494
    url: https://bugs.openjdk.org/browse/JDK-8054494
  - title: Test changes for JDK-8054494
    url: https://github.com/openjdk/jdk/commit/083d9a2b6145a422bad64423675660c94bb32958#diff-12d7d73c9a167ec9451fe5e53373574adc02d9179cab3465e096a07d1aa79fc7
  - title: Variable Handles
    url: https://openjdk.java.net/jeps/193
  message: |-
    The `sun.misc.Unsafe` API is scheduled for removal in the long term, and some of its methods have been removed. In short term, please consider the following:

     - The `get` and `put` methods have equivalents that take long offsets (OpenJDK 8's version of the removed methods just casts the int offsets and used the long versions).
     - `fieldOffset(Field)` should be replaced by `staticFieldOffset(Field)` and `ObjectFieldOffset(Field)`.
     - `staticFieldBase(Class)` should be replaced by asking for a specific field with `staticFieldBase(Field)`. The removed method only returned the address of the first static field in the class and relied on the assumption that the JVM stored all statics together, which may not be true.
     - `tryMonitorEnter(Object)` and `monitorExit(Object)` can be replaced with use of the Java synchronized primitives, as illustrated in the test changes for JDK-8054494 (see links below).

     In the long term, please consider using Variable Handles (see the link below)
  ruleID: java-removals-00110
  when:
    java.referenced:
      location: METHOD_CALL
      pattern: sun.misc.Unsafe.(getInt|putInt|getFloat|putFloat|getDouble|putDouble|getBoolean|putBoolean|getObject|putObject|getByte|putByte|getChar|putChar|getShort|putShort|getLong|putLong|fieldOffset|staticFieldBase|tryMonitorEnter|monitorEnter|monitorExit)*
- category: mandatory
  customVariables:
  - name: encoderDecoder
    nameOfCaptureGroup: encoderDecoder
    pattern: sun.misc.BASE64(?P<encoderDecoder>(Encoder|Decoder))?.*
  description: The `sun.misc.BASE64` class has been removed.
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: java.util.Base64 - Javadoc
    url: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Base64.html
  - title: JDK-8006182
    url: https://bugs.openjdk.org/browse/JDK-8006182
  - title: Code example
    url: https://github.com/openjdk/jdk/commit/ec9e303630158405d0faaabb74f466f0a376c1fc
  - title: OpenJDK - Original enhancement request
    url: https://bugs.openjdk.java.net/browse/JDK-8006182
  message: "The `sun.misc.BASE64{{encoderDecoder}}` class has been removed. \n It
    can be replaced with `Base64.{{encoderDecoder}}` class instantiated using `java.util.Base64.getMime{{encoderDecoder}}()`
    method. \n For further examples on how to replace the `BASE64{{encoderDecoder}}`
    class with `Base64.{{encoderDecoder}}` one, refer to the \"Code example\" link
    below."
  ruleID: java-removals-00120
  when:
    java.referenced:
      location: IMPORT
      pattern: sun.misc.BASE64(Encoder|Decoder)*
- category: mandatory
  customVariables: []
  description: The `runFinalizersOnExit` methods have been removed
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: JDK 11 removed APIs
    url: https://docs.oracle.com/en/java/javase/11/migrate/index.html#JSMIG-GUID-4B613B7E-B150-4D0A-835C-2393C60BE1F8
  message: |-
    The `java.lang.System.runFinalizersOnExit(boolean value)` and `java.lang.Runtime.runFinalizersOnExit(boolean value)`
     have been removed as they are regarded as inherently unsafe. Running finalizers on exit was disabled by default
     and enabling it could result in finalizers being called on live objects which are still being manipulated by other threads.

     Remove these method calls.
  ruleID: java-removals-00130
  when:
    or:
    - java.referenced:
        location: METHOD_CALL
        pattern: java.lang.System.runFinalizersOnExit(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: java.lang.Runtime.runFinalizersOnExit(*)
- category: mandatory
  customVariables: []
  description: The `java.awt.Font.getPeer()` and `java.awt.Component.getPeer()` methods
    have been removed
  effort: 3
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: java.awt.peer Not Accessible
    url: https://docs.oracle.com/en/java/javase/11/migrate/index.html#JSMIG-GUID-0C350BAB-F2C8-409E-AD3E-63831C684A55
  message: "The `java.awt.Font.getPeer()` and `java.awt.Component.getPeer()` methods
    have been removed. \n The `java.awt.peer` and `java.awt.dnd.peer` are no longer
    accessible and are considered\n internal implementation details, the API may be
    removed without notice or changed in non\n compatible ways. \n Methods exposing
    this API, such as `java.awt.Font.getPeer()` have been removed since JDK 9. \n
    Since Font rendering is platform independent, there are no substitutes for this
    method."
  ruleID: java-removals-00140
  when:
    or:
    - java.referenced:
        location: METHOD_CALL
        pattern: java.awt.Font.getPeer(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: java.awt.Component.getPeer(*)
- category: potential
  customVariables: []
  description: Changes in ClassLoader hierarchy in JDK 11 may impact code
  effort: 1
  labels:
  - konveyor.io/source=openjdk8-
  - konveyor.io/source=openjdk
  - konveyor.io/target=openjdk11+
  - konveyor.io/target=openjdk
  links:
  - title: JDK11 New Classloader Implementations
    url: https://docs.oracle.com/en/java/javase/11/migrate/index.html#JSMIG-GUID-A868D0B9-026F-4D46-B979-901834343F9E
  - title: ClassLoader Constructor API
    url: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ClassLoader.html#%3Cinit%3E(java.lang.ClassLoader)
  message: |-
    The changes that were implemented in JDK 9 may impact code that creates class loaders with null (that is, the bootstrap class loader)
     as the parent class loader and assumes that all platform classes are visible to the parent.
     Such code may need to be changed to use the platform class loader as the parent (see the links below)
  ruleID: java-removals-00150
  when:
    java.referenced:
      pattern: java.lang.ClassLoader

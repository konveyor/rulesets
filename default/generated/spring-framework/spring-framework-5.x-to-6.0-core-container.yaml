- ruleID: spring-framework-5.x-to-6.0-core-container-00001
  category: potential
  effort: 1
  labels:
  - konveyor.io/source=spring5
  - konveyor.io/target=spring6+
  when:
    java.referenced:
      pattern: org.springframework.beans.BeanInfoFactory
  description: Spring Framework 6.0 does not use Introspector anymore
  message: |
    The core container now performs basic bean property determination without `java.beans.Introspector` by default.

    In case of sophisticated JavaBeans usage, for full backwards compatibility with 5.3.x, specify the following content
    in a `META-INF/spring.factories` file, which enables 5.3-style full `java.beans.Introspector` usage:
    
    ```
    org.springframework.beans.BeanInfoFactory=org.springframework.beans.ExtendedBeanInfoFactory
    ```
  links:
  - title: 'Spring 6.0 migration guide'
    url: https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-6.0-Release-Notes#core-container

- ruleID: spring-framework-5.x-to-6.0-core-container-00010
  category: potential
  effort: 2
  labels:
    - konveyor.io/source=spring5
    - konveyor.io/target=spring6+
  when:
    java.referenced:
      pattern: org.springframework.scheduling.annotation.Async
      location: ANNOTATION
  description: Methods annotated with @Async must return either Future or void
  message: |
    Methods annotated with @Async must return either Future or void. This has long been documented but is now also
    actively checked and enforced, with an exception thrown for any other return type.
    
    If your @Async annotated method does not return `Future` or `void`, please change its signature.
  links:
    - title: 'Spring 6.0 migration guide'
      url: https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-6.0-Release-Notes#core-container
      
- ruleID: spring-framework-5.x-to-6.0-core-container-00020
  category: potential
  effort: 3
  labels:
  - konveyor.io/source=spring5
  - konveyor.io/target=spring6+
  when:
    java.referenced:
      pattern: org.springframework.util.concurrent.ListenableFuture*
      location: IMPORT
  description: ListenableFuture and related types are deprecated since Spring Framework 6.0.  
  message: |
    Spring Framework 6.0 has deprecated support for ListenableFuture and related types (ListenableFutureCallback, SettableListenableFuture, etc.)
    The reason for deprecation is the introduction of CompletableFuture in Java 8, which offers a richer set of features and better integration with the Java ecosystem.
    java.util.concurrent.CompletableFuture is now the recommended way to handle asynchronous operations in Spring applications.
  Example:
    
        import java.util.concurrent.CompletableFuture;

        public class CompletableFutureCallback {
            public static void main(String[] args) {
              CompletableFuture<String> completableFuture = new CompletableFuture<>();
              Runnable runnable = callUpstreamWS(completableFuture);
              completableFuture.whenComplete((res, error) -> {
              if (error != null) {
              // Handle exception
              } else if (res != null) {
              // Process data
              }
              });
              new Thread(runnable).start();
            }

            private static Runnable callUpstreamWS(CompletableFuture<String> completableFuture) {
                  return () -> {
                    try {
                    //Upstream call
                    Thread.sleep(5000);
                    } catch (InterruptedException e) {
                    e.printStackTrace();
                    }
                    completableFuture.complete("ws.data");
                    };
            }
        }
  links:
  - title: 'Spring 6.0 migration guide'
    url: https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-6.0-Release-Notes#core-container


- category: mandatory
  customVariables: []
  description: WebLogic scheduled job
  effort: 3
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - scheduler
  - ejb
  - timer
  links:
  - title: Java EE 7 - Using TimerService
    url: https://docs.oracle.com/javaee/7/tutorial/ejb-basicexamples004.htm
  message: WebLogic scheduled jobs should be migrated to use the standard EJB `javax.ejb.TimerService`.
  ruleID: weblogic-eap7-01000
  tag:
  - scheduler
  - ejb
  - timer
  - weblogic
  - WebLogic scheduled job
  when:
    java.referenced:
      location: IMPLEMENTS_TYPE
      pattern: weblogic.time.common.Triggerable
- category: mandatory
  customVariables: []
  description: WebLogic StringUtils usage
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  links:
  - title: Apache Commons Lang
    url: https://commons.apache.org/proper/commons-lang/
  message: Replace with the `StringUtils` class from Apache Commons.
  ruleID: weblogic-eap7-02000
  when:
    java.referenced:
      location: IMPORT
      pattern: weblogic.utils.StringUtils*
- category: mandatory
  customVariables: []
  description: WebLogic specific Apache XML package
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  links: []
  message: Code using this package should be replaced with code using the org.apache.xml
    package from [Apache Xerces](http://xerces.apache.org/).
  ruleID: weblogic-eap7-03000
  when:
    java.referenced:
      location: PACKAGE
      pattern: weblogic.apache.xml*
- category: mandatory
  customVariables:
  - name: classname
    nameOfCaptureGroup: classname
    pattern: weblogic.transaction.(?P<classname>(Client)*TransactionManager)
  description: WebLogic TransactionManager usage
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - transactions
  links:
  - title: JBoss EAP - Java Transaction API (JTA)
    url: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html-single/development_guide/#java_transaction_api_jta
  - title: Java Enterprise Edition 7 - TransactionManager
    url: http://docs.oracle.com/javaee/7/api/javax/transaction/TransactionManager.html
  message: Replace with the Java EE standard [javax.transaction.TransactionManager](http://docs.oracle.com/javaee/7/api/javax/transaction/TransactionManager.html)
  ruleID: weblogic-eap7-04000
  when:
    java.referenced:
      pattern: weblogic.transaction.(Client)*TransactionManager
- category: mandatory
  customVariables: []
  description: WebLogic TransactionManager usage of resume method
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - transactions
  links: []
  message: Replace with the Java EE standard method `javax.transaction.TransactionManager.resume(Transaction
    tx)`.
  ruleID: weblogic-eap7-05000
  when:
    or:
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.TransactionManager.resume(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.TransactionManager.forceResume(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.ClientTransactionManager.resume(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.ClientTransactionManager.forceResume(*)
- category: mandatory
  customVariables: []
  description: WebLogic TransactionManager usage of suspend method
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - transactions
  links: []
  message: Replace with the Java EE standard `javax.transaction.TransactionManager.suspend()`
  ruleID: weblogic-eap7-06000
  when:
    or:
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.TransactionManager.suspend(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.TransactionManager.forceSuspend(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.ClientTransactionManager.suspend(*)
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.ClientTransactionManager.forceSuspend(*)
- category: mandatory
  customVariables: []
  description: WebLogic TxHelper usage
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - transactions
  links: []
  message: Remove the `weblogic.transaction.TxHelper` import statement.
  ruleID: weblogic-eap7-07000
  when:
    java.referenced:
      location: IMPORT
      pattern: weblogic.transaction.TxHelper
- customVariables:
  - name: classname
    nameOfCaptureGroup: classname
    pattern: weblogic.transaction.(?P<classname>(Client)*TxHelper.)?getTransactionManager\(\)
  description: WebLogic ClientTxHelper
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - transactions
  links: []
  message: |-
    Look up the Java Enterprise Edition `javax.transaction.TransactionManager` in JBoss EAP using the following code:

     ```java
     InitialContext context = new InitialContext();
     TransactionManager transactionManager =
     (TransactionManager)context.lookup("java:jboss/TransactionManager");
     ```
  ruleID: weblogic-eap7-08000
  when:
    or:
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.ClientTxHelper.getTransactionManager(*)
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.TxHelper.getTransactionManager(*)
- category: mandatory
  customVariables: []
  description: WebLogic proprietary Clob JDBC object (OracleThinClob)
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - jdbc
  links:
  - title: Oracle JDBC Documentation
    url: https://docs.oracle.com/database/121/JAJDB/oracle/jdbc/class-use/OracleClob.html
  - title: java.sql.Clob interface
    url: http://docs.oracle.com/javase/7/docs/api/java/sql/Clob.html
  message: This Oracle and WebLogic proprietary code (`OracleThinClob`) should be
    replaced with the use of the java.sql.Clob interface.
  ruleID: weblogic-eap7-09000
  when:
    java.referenced:
      pattern: weblogic.jdbc.vendor.oracle.OracleThinClob
- category: mandatory
  customVariables: []
  description: WebLogic JDBC code
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - jdbc
  links:
  - title: Oracle JDBC Documentation
    url: https://docs.oracle.com/database/121/JAJDB/oracle/jdbc/class-use/OracleClob.html
  - title: java.sql.Clob interface
    url: http://docs.oracle.com/javase/7/docs/api/java/sql/Clob.html
  message: This code is specific to WebLogic and should be replaced with `java.sql.Clob.setCharacterStream(1)`
  ruleID: weblogic-eap7-10000
  when:
    java.referenced:
      location: METHOD_CALL
      pattern: weblogic.jdbc.vendor.oracle.OracleThinClob.getCharacterOutputStream(*)
- category: mandatory
  customVariables: []
  description: WebLogic proprietary logger (NonCatalogLogger)
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - logging
  links:
  - title: JDK Logging Documentation
    url: https://docs.oracle.com/javase/7/docs/technotes/guides/logging/overview.html
  - title: Logging with JBoss EAP
    url: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/configuration_guide/logging_with_jboss_eap
  message: |-
    The WebLogic `NonCatalogLogger` is not supported on JBoss EAP, and should be migrated to a supported logging framework,
     such as the JDK Logger or JBoss Logging:

     ```java
     import java.util.logging.Logger;
     Logger LOG = Logger.getLogger("MyLogger");
     ```
  ruleID: weblogic-eap7-11000
  when:
    or:
    - java.referenced:
        location: METHOD_CALL
        pattern: weblogic.i18n.logging.NonCatalogLogger(*)
    - java.referenced:
        location: CONSTRUCTOR_CALL
        pattern: weblogic.i18n.logging.NonCatalogLogger*
- category: mandatory
  customVariables: []
  description: WebLogic Oracle FCF JDBC property
  effort: 1
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - jdbc
  links:
  - title: Implement Oracle Fast Connection Failover (FCF) in EAP
    url: https://access.redhat.com/articles/1329233
  message: |-
    Oracle Fast Connection Failover is specific property supported only by Oracle JDBC driver which provides support for their vendor's special features transparently to the application server in which they are deployed.

     For example, one can supply a URL like this to the Oracle JDBC driver and the driver will provide transparent load-balancing and fail-over:
     ```
     <xa-datasource-property name="URL">jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=my.host.org)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=my.host.org)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=servjboss)(failover_mode=(type=select)(method=basic)))</xa-datasource-property>
     ```
  ruleID: weblogic-eap7-12000
  when:
    builtin.xml:
      namespaces: {}
      xpath: /jdbc-data-source/jdbc-driver-params/property/name[text()='FastConnectionFailoverEnabled']
- category: mandatory
  customVariables: []
  description: WebLogic side-by-side redeployment configuration
  effort: 3
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  links:
  - title: Replace WebLogic side-by-side production redeployment in EAP 6
    url: https://access.redhat.com/articles/1329253
  message: |-
    Oracle WebLogic Server includes a proprietary side-by-side production redeployment feature. For applications that meet certain requirements and restrictions, the new version of the application is deployed while the older version is still running.
     The old and new applications must be running on the same server or cluster. The new version of the application accepts new web session requests while the older version finishes processing requests already in process. Upon completion of the existing session requests, the older version of the application is then undeployed.

     In JBoss EAP, you can either deploy the new application to a secondary server group or cluster, or deploy the new application serially to the same clustered domain.
  ruleID: weblogic-eap7-13000
  when:
    builtin.filecontent:
      filePattern: MANIFEST\.MF
      pattern: 'Weblogic-Application-Version:'
- category: mandatory
  customVariables: []
  description: WebLogic Oracle Wallet
  effort: 3
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  links:
  - title: Replace WebLogic Oracle Wallets When Migrating to EAP 6
    url: https://access.redhat.com/articles/1329073
  message: |-
    WebLogic administrators use wallets created by Oracle Wallet Manager to manage public key security credentials on application clients and servers.

     These wallets must first be converted to standard Java KeyStore (JKS) entries that can then be used to configure the credentials in JBoss EAP 7.
  ruleID: weblogic-eap7-15000
  when:
    builtin.filecontent:
      filePattern: .*\.(java|properties|xml)
      pattern: oracle.net.wallet_location
- category: mandatory
  customVariables: []
  description: WebLogic InitialContextFactory
  effort: 3
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - configuration
  links:
  - title: Calling JMS resources and EJB in EAP 6 from Weblogic
    url: https://access.redhat.com/solutions/161543
  - title: How to configure an EJB client in JBoss EAP 6
    url: https://access.redhat.com/solutions/396853
  message: |-
    `weblogic.jndi.WLInitialContextFactory` is an implementation of `InitialContextFactory` used to get object instances from JNDI.

     The equivalent functionality needs to be configured on JBoss EAP 7 using `org.jboss.naming.remote.client.InitialContextFactory`. Then the context could be instanticated as follows: `InitialContext ctx = new InitialContext();`.
  ruleID: weblogic-eap7-016000
  when:
    builtin.filecontent:
      filePattern: .*\.(java|properties|xml)
      pattern: weblogic.jndi.WLInitialContextFactory
- category: mandatory
  customVariables: []
  description: WebLogic T3 JNDI binding
  effort: 3
  labels:
  - konveyor.io/source=weblogic
  - konveyor.io/target=eap7
  - konveyor.io/target=eap8
  - konveyor.io/target=eap
  - weblogic
  - configuration
  links:
  - title: Oracle WebLogic RMI with T3
    url: https://docs.oracle.com/cd/E24329_01/web.1211/e24389/rmi_t3.htm#WLRMI143
  - title: Invoking EJBs deployed on WebLogic from EAP6
    url: https://access.redhat.com/solutions/1230143
  message: |-
    Weblogic’s implementation of the RMI specification uses a proprietary protocol known as T3. T3S is the version of the protocol over SSL.
     `t3://` and `t3s://` URLs are used to configure a JNDI InitialContext within WebLogic.

     The equivalent functionality needs to be configured in JBoss EAP 7.
     This could be done either by using standard Java EE JNDI names or by using a WebLogic proprietary library if the connectivity to WebLogic server is still required.
  ruleID: weblogic-eap7-017000
  when:
    builtin.filecontent:
      filePattern: .*\.(java|properties|xml)
      pattern: t3s?://

rulesPath: ../80-seam-java.windup.yaml
providers:
- name: java
  dataPath: ./data/80-seam-java
- name: builtin
  dataPath: ./data/80-seam-java
tests:
- ruleID: seam-java-00000
  testCases:
  - name: tc-1
    hasTags:
    - Seam API
- ruleID: seam-java-00010
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: You can use Java EE .*javax.enterprise.context.Conversation
- ruleID: seam-java-00030
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: There is no direct replacement for this Seam API. The .*org.jboss.seam.Seam.*
- ruleID: seam-java-00040
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: CDI supports static injection in comparison to Seam 2 dynamic
        injection. So you don't need to have .*@Named.*
- ruleID: seam-java-00050
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Convert to a valid CDI scope. CDI scopes has its own annotation.*
- ruleID: seam-java-00060
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Convert Seam annotation .*@In.*
  - name: tc-2
    hasIncidents:
      atLeast: 1
      messageMatches: Remove this Seam annotation .*@AutoCreate.*
- ruleID: seam-java-00070
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: CDI does not support bijection and does a static injection in
        comparison to Seam 2, where it is performed dynamically.*
- ruleID: seam-java-00071
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Seam Factory annotation was used for binding non Seam component
        methods into Seam context life cycle.*
- ruleID: seam-java-00080
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Java EE uses for such use case .*@javax.ejb.Singleton.*
- ruleID: seam-java-00090
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Seam 2 provided along to standard Java EE .*javax.annotation.PostConstruct.*
        also Seam specific annotation .*@Create.*
- ruleID: seam-java-00091
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Seam 2 provided along to standard Java EE .*javax.annotation.PreDestroy.*
        also Seam specific annotation .*@Destroy.*
- ruleID: seam-java-00100
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: There is no direct replacement, but it can be implemented with
        CDI Conversation support.
- ruleID: seam-java-00110
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: .*If you need to keep programmatic lookup use .*javax.enterprise.inject.Instance.*
- ruleID: seam-java-00120
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Refactor to have annotated error handler which redirect to a
        viewID page for displaying error page.
- ruleID: seam-java-00130
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: .*@Install.*
- ruleID: seam-java-00140
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Rework code with a default Java Servlet .*javax.servlet.Filter.*
- ruleID: seam-java-00150
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Replace this Seam annotation with default Java Servlet .*javax.servlet.Filter`.*
- ruleID: seam-java-00160
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Rework using CDI's injected concrete context.
- ruleID: seam-java-00170
  testCases:
  - name: tc-1
    hasTags:
    - Seam integration with jBPM
- ruleID: seam-java-00180
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Rework with CDI conversation context .*javax.enterprise.context.Conversation.*
- ruleID: seam-java-00190
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Rework with .*javax.enterprise.context.Conversation.begin.*
- ruleID: seam-java-00200
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Rework with .*javax.enterprise.context.Conversation.end().*
- ruleID: seam-java-00210
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: .*@RequestParameter.*
- ruleID: seam-java-00220
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Seam 2 provides a built-in logger implementation.*
- ruleID: seam-java-00230
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: In Java EE, the Expression Language Specification has evolved
        and allows parameters to be passed to EL method expressions.*
- ruleID: seam-java-00240
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Both Seam 2 and CDI beans may produce and consume events in
        order to communicate with other beans. Unlike method invocation, events allow
        for decoupled architecture with no compile-time dependency.*
- ruleID: seam-java-00250
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: In the Java EE, the concept of interceptors was extracted into
        a separate specification. As a result, not only EJBs but any CDI managed beans
        can benefit from this facility.*
- ruleID: seam-java-00260
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Replace with Java EE annotation .*@javax.ejb.Asynchronous.*
- ruleID: seam-java-00270
  testCases:
  - name: tc-1
    hasIncidents:
      atLeast: 1
      messageMatches: Replace with Java EE annotation .*@javax.transaction.Transactional.*
